//신규회원가입 페이지 컴포넌트
//호출주소 : http://localhost:3003/regist

//화면상에 데이터 관리를 위한 useState 훅 참조하기
import { useState, useEffect } from "react";

//프론트엔드 라우팅 주소 이동처리를 위한 useRouter 훅 참조하기
//내가 원하는 페이지 컴포넌트로 보내줄 수 있음
import { useRouter } from "next/router";

//신규회원 가입정보 인터페이스 타입 참조하기
import { IEntryMember, Faculty, Department } from "@/interfaces/member";

const departments = {
  Engineering: [
    "Computer Science",
    "Mechanical Engineering",
    "Electrical Engineering",
  ],
  Arts: ["Visual Arts", "Music", "Theatre"],
  Science: ["Physics", "Chemistry", "Biology"],
};

//★이 부분은 백엔드에서 받아온 데이터를 넣어줘야하는 데 어떻게 해야하나????
const facultyData: Faculty[] = [
  //★★Faulty 인터페이스 타입을 여러 개 가질 수 있도록 배열로 만들어줌
  {
    faculty_id: 0,
    faculty_name: "전체",
  },
  {
    faculty_id: 1,
    faculty_name: "전자정보대학",
  },
  {
    faculty_id: 2,
    faculty_name: "인문대학",
  },
  {
    faculty_id: 3,
    faculty_name: "공과대학",
  },
];

const departmentData: Department[] = [
  {
    department_id: 0,
    faculty_id: 0,
    department_name: "전체",
  },
  {
    department_id: 1,
    faculty_id: 1,
    department_name: "컴퓨터공학과",
  },
  {
    department_id: 2,
    faculty_id: 1,
    department_name: "정보통신공학과",
  },
  {
    department_id: 3,
    faculty_id: 2,
    department_name: "영어영문학과",
  },
  {
    department_id: 4,
    faculty_id: 2,
    department_name: "국어국문학과",
  },
  {
    department_id: 5,
    faculty_id: 3,
    department_name: "신소재공학과",
  },
  {
    department_id: 6,
    faculty_id: 3,
    department_name: "건축공학과",
  },
];

//회원가입 페이지 컴포넌트
const Regist = () => {
  //useRouter훅 객체 생성하기
  const router = useRouter();

  //학부 데이터 상태관리
  const [faculties, setFaculties] = useState<Faculty[]>(facultyData);
  const [selectedFaculty, setSelectedFaculty] = useState<Faculty>({
    //★★선택된 단일 학부 데이터를 관리할 것이므로 배열로 만들지 않음
    faculty_id: 0,
    faculty_name: "전체",
  });

  //학과 데이터 상태관리
  const [department, setdepartment] = useState<Department[]>(departmentData);
  const [selectedDepartment, setSelectedDepartment] = useState<Department>({
    department_id: 0,
    faculty_id: 0,
    department_name: "전체",
  });

  // const facultyChange = () => {
  //   selectedFaculty(e.target.value);
  //   setdepartment({}); // 초기화
  // };

  const departmentChange = () => {};
  // setdepartment(e.target.value);

  //신규 회원가입 정보 상태 데이터 정의 및 값 초기화처리######################
  //useState(초기값설정) 함수는 [변수, 변수값변경 세터함수] 배열을 반환한다.
  //배열의 비구조화 할당
  const [member, setMember] = useState<IEntryMember>({
    email: "",
    password: "",
    name: "",
    gender: "",
    department_id: 0,
    faculty_id: 0,
    department_name: "",
  });

  //사용자 입력요소의 값이 변경될 때마다 데이터소스와 동기화 처리해주는 이벤트처리함수
  const memberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    //...member란 현재 member상수의 복사본 객체를 생성한다는 의미
    //[]란 동적 속성(ECMA문법- 있으면 쓰고 없으면 만드는 것)
    //e.target은 Change 이벤트가 발생한 UI요소를 말한다. -> name에 마우스 커버를 놓고 입력을 하고 있으면 name 인풋박스에 onChange 이벤트가 발생한다.
    //[e.target.name - 이벤트가 발생한 요소의 name 속성값]:e.target.name(이벤트가 발생한 요소의 현재 입력 value값)
    setMember({ ...member, [e.target.name]: e.target.value });
  };

  const genderChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    //...member란 현재 member상수의 복사본 객체를 생성한다는 의미
    //[]란 동적 속성(ECMA문법- 있으면 쓰고 없으면 만드는 것)
    //e.target은 Change 이벤트가 발생한 UI요소를 말한다. -> name에 마우스 커버를 놓고 입력을 하고 있으면 name 인풋박스에 onChange 이벤트가 발생한다.
    //[e.target.name - 이벤트가 발생한 요소의 name 속성값]:e.target.name(이벤트가 발생한 요소의 현재 입력 value값)
    setMember({ ...member, [e.target.name]: e.target.value });
  };

  //학부 선택시 학부에 해당하는 학과 데이터를 조회하는 함수
  const facultyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    //선택한 단일 카테고리 정보 조회하기
    const faculty = faculties.find(
      (f) => f.faculty_id === Number(e.target.value)
    ) as Faculty; //★ as Faculty은 왜 하는지 모르겠다?????

    setSelectedFaculty(faculty);
  };

  // //특정 상태값이 변경되는 시점을 확인해서 기능을 구현합니다.
  // useEffect(() => {
  //   const searchResult = facultyData.filter(
  //     (f) => f.faculty_id === selectedFaculty.faculty_id
  //   );

  //   if (selectedFaculty.faculty_id === 0) {
  //     //전체 카테고리를 선택한 경우 전체 제품데이터 출력
  //     setdepartment("");
  //   } else {
  //     //기타 카데고리 선택시 관련 제품목록만 출력
  //     setdepartment(searchResult);
  //   }
  // }, [selectedFaculty]);

  //회원가입 버튼 클릭시 신규 회원정보 백엔드 처리함수
  const registSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    /*onsubmit 이벤트가 발생하면 무조건 새로고침(깜빡거림) 발생하는데 사용자 입장에선 좋지 않으므로 이를 통해 방지
      e.preventDefault();는 Form Submit 이벤트가 호출되면 기본적으로 발생하는 화면 리프레시(새로 고침) 기능을 막기 위해 사용됩니다.
      폼이 제출되면 브라우저는 기본적으로 페이지를 새로 고침하여 폼 데이터를 서버로 전송합니다.
      그러나 SPA(Single Page Application)나 클라이언트 측에서 폼 데이터를 처리하고자 할 때는 이러한 새로 고침이 불필요하거나 원치 않을 수 있습니다.
      따라서 e.preventDefault();를 호출하여 폼 제출 이벤트의 기본 동작을 취소하고, 화면이 리프레시되는 현상을 방지합니다.
      이를 통해 폼 데이터를 JavaScript로 처리하거나 AJAX 요청을 통해 서버로 전송할 수 있습니다.*/
    e.preventDefault();

    try {
      /* 백엔드 RESTful API 중 신규회원가입 API를 fetch() ajax호출기능을 통해 가입정보를 백엔드로 전달한다.
       예시1) ES2015 자바스크립트 기본 AJAX 통신 기능하는 내장 라이브러리인 fetch를 이용해 백엔드와 통신하기
       await fetch("백엔드 API호출주소", 호출옵션);
       fetch()함수를 통해 데이터를 백엔드로 전달할 때는 반드시 json문자열 형태로 전달합니다.
       json데이터를 json 문자열로 변경해주는 자바스크립트 내장함수 -> JSON.stringify(json데이터(자바스크립트객체)) */
      //Step1) fetch()함수 호출하기
      const response = await fetch("http://localhost:5000/api/member/entry", {
        method: "POST",
        headers: { "Content-Type": "application/json" }, //필수!!!! - 프론트엔드에서 제공하는 데이터 타입의 유형을 지정, json으로 보낸다고 header에 명시하는 용도
        body: JSON.stringify(member),
      });

      //Step2) error가 나지 않는 상황 - fetch()함수 호출결과 백엔드 반환 실제 데이터 추출하기
      const result = await response.json();

      if (result.code == 200) {
        console.log("백엔드에서 제공한 json데이터 확인:", result);

        //정상적으로 회원가입 된 경우 로그인 페이지 컴포넌트로 이동처리
        //router.push('이동할 주소(도메인주소는 제외)') - 프론트엔드 라우팅 주소 이동처리
        router.push("/login");
      } else {
        console.log("백엔드 서버 에러발생:", result.msg);
        if (result.msg == "ExistMember" && result.code == 400) {
          alert("동일한 메일주소가 존재합니다.");
          return false;
        }
      }
    } catch (err) {
      console.error("백엔드 REST API 호출 중에 에러가 발생했습니다.");
    }
  };

  return (
    <div className="flex-col bg-custom-dark-blue h-screen w-100 justify-center text-white">
      <div className="mx-auto w-full max-w-sm pt-1">
        <h1 className="mt-20 text-center  font-bold  tracking-tight ">
          Regist your account
        </h1>
      </div>

      <div className="mt-10 mx-auto w-full max-w-sm">
        {/* 신규 회원가입 폼영역*/}
        <form className="space-y-6" onSubmit={registSubmit}>
          {/* 메일주소 입력요소 영역 */}
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium leading-6 "
            >
              Email address
            </label>
            <div className="mt-2">
              <input
                id="email"
                name="email"
                type="email"
                value={member.email}
                onChange={memberChange}
                autoComplete="email"
                required
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>

          {/* 사용자 암호 입력요소 영역 */}
          <div>
            <div className="flex items-center justify-between">
              <label
                htmlFor="password"
                className="block text-sm font-medium leading-6 "
              >
                Password
              </label>
            </div>
            <div className="mt-2">
              <input
                id="password"
                name="password"
                type="password"
                value={member.password}
                onChange={memberChange}
                autoComplete="current-password"
                required
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>

          {/* 사용자 이름,성별 입력요소 영역 */}
          <div>
            <div className="items-center justify-between">
              <label
                htmlFor="name"
                className="block text-sm font-medium leading-6 "
              >
                Name
              </label>
              <div className="mt-2 flex ">
                {/* 성별 입력 */}
                <select
                  id="gender"
                  name="gender"
                  value={member.gender}
                  onChange={genderChange}
                  className="block w-32 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 text-sm leading-6"
                >
                  <option value="man">남</option>
                  <option value="girl">여</option>
                </select>
                {/* 이름 입력 */}
                <input
                  id="name"
                  name="name"
                  type="text"
                  value={member.name}
                  onChange={memberChange}
                  autoComplete="current-password"
                  required
                  className="ml-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>
          </div>

          {/* 학부선택 영역 */}
          <div className="mb-4">
            <label
              htmlFor="faculty"
              className="block text-sm font-medium leading-6 "
            >
              Select Faculty
            </label>
            <select
              id="faculty"
              value={selectedFaculty.faculty_id} //★★선택된 학부 데이터를 통해 학부 아이디값을 가져옴
              name="faculty"
              onChange={facultyChange}
              className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
            >
              <option value="" selected>
                선택
              </option>
              {/* ★★map()함수에서 사용하는 매개변수 faculty에서 category_id를 가져와야함 */}
              {faculties.map((faculty, index) => (
                <option key={index} value={faculty.faculty_id}>
                  {faculty.faculty_name}
                </option>
              ))}
            </select>
          </div>

          {/*학과선택영역 */}
          {selectedFaculty && (
            <div>
              <label
                htmlFor="department"
                className="block text-sm font-medium leading-6 "
              >
                Select Department
              </label>
              <select
                id="department"
                value={selectedDepartment.department_id}
                onChange={departmentChange}
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              >
                {/* <option value="">Select Department</option>
                {department[selectedFaculty].map((department) => (
                  <option key={department} value={department}>
                    {department}
                  </option>
                ))} */}
                {department.map((department, index) => (
                  <option key={index} value={department.department_id}>
                    {department.department_name}
                  </option>
                ))}
              </select>
            </div>
          )}

          {/* 회원가입 버튼 표시영역 */}
          <div>
            <button
              type="submit"
              className="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            >
              Regist
            </button>
          </div>
        </form>

        <p className="mt-10 text-center text-sm text-gray-500">
          Already a member?{" "}
          <a
            href="/login"
            className="font-semibold leading-6 text-indigo-600 hover:text-indigo-500"
          >
            Login
          </a>
        </p>
      </div>
    </div>
  );
};

export default Regist;
